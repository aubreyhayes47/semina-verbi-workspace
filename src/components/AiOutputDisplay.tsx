import React, { useState, useEffect } from 'react';
import { CopyIcon, SparklesIcon, InfoIcon, XIcon } from 'lucide-react'; // Added XIcon for close button

interface AiOutputDisplayProps {
  title: string; // Title for the AI output section
  content: string; // The AI-generated text content
  aiFeatureName: string; // The key for the AI feature in currentProject.aiFeaturesUsed (e.g., 'summaryGenerator')
  currentProject: { // Partial type for currentProject to only include necessary parts
    aiFeaturesUsed: { [key: string]: boolean };
  };
  updateCurrentProject: (updates: { aiFeaturesUsed: { [key: string]: boolean } }) => void; // Function to update parent state
}

export const AiOutputDisplay: React.FC<AiOutputDisplayProps> = ({
  title,
  content,
  aiFeatureName,
  currentProject,
  updateCurrentProject,
}) => {
  const [isVisible, setIsVisible] = useState(true); // State to control visibility of the display

  // Automatically mark the feature as used when content is first displayed
  // This effect ensures that the aiFeaturesUsed state is updated only when necessary.
  useEffect(() => {
    // Check if content is present and the feature hasn't been marked as used yet
    if (content && !currentProject.aiFeaturesUsed[aiFeatureName]) {
      // Create a new object for aiFeaturesUsed to ensure immutability
      const updatedAiFeaturesUsed = {
        ...currentProject.aiFeaturesUsed,
        [aiFeatureName]: true, // Mark this specific AI feature as used
      };
      updateCurrentProject({ aiFeaturesUsed: updatedAiFeaturesUsed });
    }
    // If content becomes empty, hide the display
    if (!content) {
      setIsVisible(false);
    } else {
      setIsVisible(true); // Show if content is present
    }
  }, [content, aiFeatureName, currentProject.aiFeaturesUsed, updateCurrentProject]);


  // Utility function to copy text to clipboard
  const copyToClipboard = () => {
    // Using document.execCommand('copy') for better iframe compatibility within the Canvas environment
    const textarea = document.createElement('textarea');
    textarea.value = content;
    document.body.appendChild(textarea);
    textarea.select();
    try {
      const successful = document.execCommand('copy');
      if (successful) {
        alert('Copied to clipboard!'); // Provide user feedback
      } else {
        alert('Failed to copy to clipboard.');
      }
    } catch (err) {
      console.error('Failed to copy text: ', err); // Log error for debugging
      alert('Failed to copy to clipboard. Your browser may not support this feature in an iframe.');
    }
    document.body.removeChild(textarea);
  };

  // If not visible, return null (render nothing)
  if (!isVisible) {
    return null;
  }

  return (
    <div className="mt-4 p-3 bg-vellum-light border border-vellum-dark rounded-md shadow-inner space-y-3 relative">
      {/* Close button for the AI output display */}
      <button
        onClick={() => setIsVisible(false)} // Simply hide the display
        className="absolute top-2 right-2 p-1 rounded-md hover:bg-vellum-dark text-ink-light transition-colors"
        aria-label="Close AI output display"
      >
        <XIcon size={16} />
      </button>

      <div className="flex items-center justify-between border-b border-vellum-dark pb-2">
        <h4 className="font-serif text-ink-dark flex items-center">
          <SparklesIcon size={16} className="text-illuminated-gold mr-2" />
          {title}
        </h4>
        <button
          onClick={copyToClipboard}
          className="flex items-center px-3 py-1.5 text-xs bg-navy text-white rounded-md hover:opacity-90 transition-opacity"
          aria-label="Copy generated text"
        >
          <CopyIcon size={12} className="mr-1" />
          Copy
        </button>
      </div>
      {/* Pre-formatted text area for AI content */}
      <pre className="whitespace-pre-wrap text-sm font-sans text-ink-dark max-h-60 overflow-y-auto">
        {content}
      </pre>
      {/* AI disclosure statement */}
      <div className="text-xs text-ink-light flex items-start pt-2 border-t border-vellum-dark">
        <InfoIcon size={14} className="mr-1 flex-shrink-0 text-illuminated-gold" />
        <p className="italic">
          This content was generated by an AI assistant. Please review and refine to ensure theological fidelity and accuracy. Your review is paramount.
        </p>
      </div>
    </div>
  );
};
